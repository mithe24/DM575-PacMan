@startuml

class Position <<record>> {
    + int x
    + int y
    --
    + Position offset(Direction dir)
    + List<Position> neighbours()
    + boolean inBounds(TileType[][] board)
    + double distance(Position)
}

abstract class Entity <<abstract>> {
    - Position pos
    - Direction dir
    - double speed
    --
    + void move(deltaSeconds)
}

class Pacman <<marker>>

interface Function

interface SearchStrategy {
    --
    + void search(Position start, Position goal, Function<Position, Boolean> isWalkable)
}

class BreadthFirstSearch {
    --
    + void search(Position start, Position goal, Function<Position, Boolean> isWalkable)
}

class Ghost {
    - SearchStrategy searchStrategy
    - Position goal
    --
    + void move(deltaSeconds)
}

class EntityUtils <<utility>> {
    --
    + static final double distance(Entity arg0, Entity arg1)
    + static final boolean hasCollided(Entity arg0, Entity arg1)
    - EntityUtils()
}

enum TileType {
    WALL
    EMPTY
    PELLET
    POWER_PELLET
}

enum Direction {
    UP
    DOWN
    LEFT
    RIGHT
    NONE
}

class GameConfig <<record>> {
    + TileType[][] initialBoard
    + double powerModeDuration
    + int lives
    + double ghostSpeed
    + double pacmanSpeed
    + int numberOfItems
    + Position pacmanStartPosition
    + Position redGhostStartPosition
    + Position blueGhostStartPosition
    + Position pinkGhostStartPosition
    + Position orangeGhostStartPosition
    --
    - static TileType[][] deepCopy(TileType[][])
}

class GameConfigBuilder <<utility>> {
    --
    + static GameConfig fromJson(InputStream)
    - static GameConfig buildFromJsonObject(JSONObject)
    - static TileType[][] parseBoard(JSONArray)
}

class GameState {
    - GameConfig config
    - TileType[][] board
    - Pacman pacman
    - List<Ghost> ghosts
    - double powerModeDuration
    - int score
    - int lives
    - int numberOfItemsLeft
    --
    + update(deltaSeconds)
    + void resetGame()
    + boolean gameOver()
    + boolean isWon()
    - void ghostDied()
    - void pacmanDied()
}

class InputStream
class JSONArray
class JSONObject

GameState "1" *-- "1" GameConfig : compose of
GameState "1" *-- "1" Pacman : compose of 
GameState "1" *-- "4" Ghost : compose of
Entity "1" *-- "1" Position : compose of
Entity "1" *-- "1" Direction : compose of
Ghost "1" *-- "1" SearchStrategy : searches with

BreadthFirstSearch ..|> SearchStrategy : implements
SearchStrategy ..> Function : uses
SearchStrategy ..> Position : uses

GameConfigBuilder ..> GameConfig : creates
GameConfigBuilder ..> InputStream : reads
GameConfigBuilder ..> JSONObject : parses
GameConfigBuilder ..> JSONArray : parses

Entity <|-- Ghost : extends
Entity <|-- Pacman : extends

GameState ..> TileType : board
Position ..> Direction : offset
GameState ..> EntityUtils : collision detection

@enduml

